[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "livestream-splitter"
version = "0.1.0"
authors = [
    {name = "Bakchich SAS", email = "contact@bakchich.com"},
]
maintainers = [
    {name = "Bakchich SAS", email = "contact@bakchich.com"},
]
description = "Split long livestream recordings into YouTube-friendly segments with CLI and Web UI"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Content Creators",
    "Intended Audience :: Developers",
    "Topic :: Multimedia :: Video",
    "Topic :: Multimedia :: Video :: Conversion",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
    "Environment :: Console",
    "Environment :: Web Environment",
]
keywords = ["livestream", "video", "splitting", "ffmpeg", "youtube", "content", "creation"]
dependencies = [
    "click>=8.1.0",
    "ffmpeg-python>=0.2.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "tqdm>=4.65.0",
]

[project.optional-dependencies]
web = ["fastapi>=0.100.0", "uvicorn>=0.23.0", "python-multipart>=0.0.6"]
dev = ["pytest>=7.4.0", "pytest-cov>=4.1.0", "black>=23.0.0", "flake8>=6.0.0", "mypy>=1.4.0"]
advanced = ["opencv-python>=4.8.0", "numpy>=1.24.0"]
all = ["livestream-splitter[web,dev,advanced]"]

[project.urls]
Homepage = "https://github.com/manfromtunis/livestream-splitter"
Repository = "https://github.com/manfromtunis/livestream-splitter"
Documentation = "https://github.com/manfromtunis/livestream-splitter/blob/main/README.md"
"Bug Tracker" = "https://github.com/manfromtunis/livestream-splitter/issues"

[project.scripts]
stream-splitter = "stream_splitter.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.html", "*.css", "*.js", "*.yaml", "*.yml"]

# Development tool configurations
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--strict-markers --strict-config"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
]